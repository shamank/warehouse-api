// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	schemas "github.com/shamank/warehouse-service/internal/domain/schemas"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetRemainingProducts provides a mock function with given fields: warehouseUUID
func (_m *Service) GetRemainingProducts(warehouseUUID string) ([]schemas.Product, error) {
	ret := _m.Called(warehouseUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetRemainingProducts")
	}

	var r0 []schemas.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]schemas.Product, error)); ok {
		return rf(warehouseUUID)
	}
	if rf, ok := ret.Get(0).(func(string) []schemas.Product); ok {
		r0 = rf(warehouseUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schemas.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(warehouseUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseProducts provides a mock function with given fields: productsToRelease
func (_m *Service) ReleaseProducts(productsToRelease []string) error {
	ret := _m.Called(productsToRelease)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseProducts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(productsToRelease)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReserveProducts provides a mock function with given fields: productsToReserve
func (_m *Service) ReserveProducts(productsToReserve []string) error {
	ret := _m.Called(productsToReserve)

	if len(ret) == 0 {
		panic("no return value specified for ReserveProducts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(productsToReserve)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
